/*=============================================================================
                                    list.h
-------------------------------------------------------------------------------
linked list

  filo (stack) : use push & pop
  fifo (queue) : use append & pop

Â© Daniel Wilkinson-Thompson 2023
daniel@wilkinson-thompson.com
-----------------------------------------------------------------------------*/
#ifndef __list_h
#define __list_h
#include <stdint.h>
#include <stdlib.h>
#include "error.h"

#define LIST_SUCCESS 1
#define LIST_FAILURE 0

#define list_invalid(l) ((l == NULL) || (l->size == 0) || (l->head == NULL))

typedef struct list_element_t
{
  void *value;
  struct list_element_t *next;
  struct list_element_t *prev;
} list_element;

typedef struct list_t
{
  list_element *head;
  list_element *tail;
  size_t size;
} list;

/*----------------------------------------------------------------------------
  init
  ----------------------------------------------------------------------------
  create a list
-----------------------------------------------------------------------------*/
list *list_init(void);

/*----------------------------------------------------------------------------
  append
  ----------------------------------------------------------------------------
  add to the end of the list
-----------------------------------------------------------------------------*/
error list_append(list *l, void *value);

/*----------------------------------------------------------------------------
  push
  ----------------------------------------------------------------------------
  add to the start of the list
-----------------------------------------------------------------------------*/
error list_push(list *l, void *value);

/*----------------------------------------------------------------------------
  pop
  ----------------------------------------------------------------------------
  pop from start of the list
-----------------------------------------------------------------------------*/
void *list_pop(list *l);

/*----------------------------------------------------------------------------
  item
  ----------------------------------------------------------------------------
  return the item at a given index
-----------------------------------------------------------------------------*/
void *list_item(list *l, size_t index);

/*----------------------------------------------------------------------------
  remove
  ----------------------------------------------------------------------------
  remove the item at a given index; must free(list_item()) first if allocated
-----------------------------------------------------------------------------*/
error list_remove(list *l, size_t index);

/*----------------------------------------------------------------------------
  free
  ----------------------------------------------------------------------------
  free the whole list
-----------------------------------------------------------------------------*/
void list_free(list *l);

/*----------------------------------------------------------------------------
  print
  ----------------------------------------------------------------------------
  print the list
-----------------------------------------------------------------------------*/
void list_print(list *l);

#endif